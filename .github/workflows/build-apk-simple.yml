# 2024년 8월 테스트된 성공적인 Kivy APK 빌드 워크플로우
# 출처: https://gist.github.com/zl475505/25245e8d28b13b3273e8bae1a63c4af2
name: 🎵 성경 MP3 플레이어 APK 빌드 (간단 버전)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      build_type:
        description: '빌드 타입을 선택하세요'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release

jobs:
  build-android:
    name: 🤖 Android APK 빌드
    runs-on: ubuntu-latest

    steps:
    - name: 📥 소스코드 체크아웃
      uses: actions/checkout@v4

    - name: 🔧 Buildozer 의존성 설치
      run: |
        echo "=== 시스템 의존성 설치 ==="
        sudo apt update
        sudo apt install -y git zip unzip python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo-dev cmake libffi-dev libssl-dev automake
        
        echo "=== Python 패키지 설치 ==="
        pip install --user --upgrade Cython virtualenv
        pip install --user --upgrade buildozer
        
        echo "=== 프로젝트 의존성 설치 ==="
        if [ -f requirements.txt ]; then
            pip install --user -r requirements.txt
        fi

    - name: ☕ Java 경로 설정 (중요!)
      run: |
        echo "=== Java 환경 설정 ==="
        export JAVA_HOME=/usr/lib/jvm/temurin-17-jdk-amd64
        sudo update-java-alternatives --set $JAVA_HOME
        export PATH=$JAVA_HOME/bin:$PATH
        
        echo "Java 버전 확인:"
        java -version
        
        # 환경 변수 설정
        echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
        echo "PATH=$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV

    - name: 📱 APK 빌드 실행
      run: |
        echo "=== Buildozer APK 빌드 시작 ==="
        
        # 빌드 전 환경 확인
        echo "=== 빌드 환경 확인 ==="
        echo "Python 버전: $(python3 --version)"
        echo "Java 버전: $(java -version 2>&1 | head -1)"
        echo "Buildozer 버전: $(buildozer --version 2>/dev/null || echo '버전 확인 불가')"
        echo "Working Directory: $(pwd)"
        echo "Contents: $(ls -la)"
        
        # main.py 파일 확인
        if [ ! -f main.py ]; then
            echo "❌ main.py 파일이 없습니다!"
            echo "사용 가능한 Python 파일들:"
            ls -la *.py || echo "Python 파일 없음"
            echo "임시로 main.py 생성..."
            if [ -f kivy_main.py ]; then
                cp kivy_main.py main.py
                echo "✅ kivy_main.py를 main.py로 복사"
            elif [ -f kivy_onedrive_main.py ]; then
                cp kivy_onedrive_main.py main.py
                echo "✅ kivy_onedrive_main.py를 main.py로 복사"
            else
                echo "from kivy.app import App" > main.py
                echo "from kivy.uix.label import Label" >> main.py
                echo "class TestApp(App):" >> main.py
                echo "    def build(self):" >> main.py
                echo "        return Label(text='Hello World')" >> main.py
                echo "TestApp().run()" >> main.py
                echo "✅ 기본 main.py 생성"
            fi
        fi
        
        # buildozer.spec 확인
        if [ ! -f buildozer.spec ]; then
            echo "buildozer.spec 파일이 없습니다. 초기화합니다..."
            buildozer init
        fi
        
        # buildozer 기본 테스트
        echo "=== buildozer 기본 테스트 ==="
        
        # buildozer 설치 확인
        echo "빌드자 설치 상태:"
        which buildozer || echo "buildozer 명령을 찾을 수 없음"
        buildozer --version || echo "buildozer 버전 확인 실패"
        
        # buildozer 도움말 확인
        echo "\nbuildozer 도움말 테스트:"
        buildozer --help | head -10 || echo "buildozer 도움말 실패"
        
        # PATH 확인
        echo "\n현재 PATH:"
        echo $PATH
        
        # Python 패키지 확인
        echo "\n설치된 Python 패키지:"
        pip list | grep -E "(buildozer|cython|kivy)" || echo "관련 패키지 없음"
        
        # 지원되는 플랫폼 확인
        echo "\nbuildozer 지원 플랫폼:"
        buildozer android --help 2>&1 | head -5 || echo "android 플랫폼 도움말 실패"
        
        # Android SDK 라이센스 수락
        echo "\n=== Android SDK 라이센스 수락 ==="
        export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
        export ANDROID_SDK_ROOT=$ANDROID_HOME

        # SDK 라이센스 수락 (모든 라이센스에 대해 y 응답)
        if [ -d "$ANDROID_HOME" ]; then
            echo "기존 Android SDK 발견, 라이센스 수락 시도..."
            (echo y; echo y; echo y; echo y; echo y; echo y) | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses 2>/dev/null || echo "라이센스 수락 시도 완료"
        else
            echo "Android SDK가 아직 설치되지 않음 - buildozer가 자동 설치할 예정"
        fi

        BUILD_TYPE="${{ github.event.inputs.build_type || 'debug' }}"
        echo "\n=== APK 빌드 시작 (BUILD_TYPE: $BUILD_TYPE) ==="
        
        # 빌드 전 로그 디렉토리 생성
        mkdir -p .buildozer/logs
        
        # buildozer 명령 실행 (단계별 디버깅)
        echo "buildozer android $BUILD_TYPE 실행 중..."
        
        # 직접 실행하여 오류 상세 정보 확인
        set +e  # 오류에도 계속 진행
        buildozer -v android $BUILD_TYPE > build_output.log 2>&1
        BUILD_EXIT_CODE=$?
        set -e
        
        echo "\n=== buildozer 종료 (exit code: $BUILD_EXIT_CODE) ==="
        
        if [ $BUILD_EXIT_CODE -eq 0 ]; then
            echo "✅ buildozer 빌드 성공!"
            echo "\n=== 성공 로그 마지막 20줄 ==="
            if [ -f build_output.log ]; then
                tail -20 build_output.log
            fi
        else
            echo "❌ buildozer 빌드 실패! (exit code: $BUILD_EXIT_CODE)"
            
            echo "\n=== 빌드 출력 로그 ==="
            if [ -f build_output.log ]; then
                LOG_SIZE=$(wc -l < build_output.log)
                echo "빌드 출력 로그 크기: $LOG_SIZE 줄"
                
                if [ $LOG_SIZE -gt 0 ]; then
                    echo "\n--- 전체 로그 내용 ---"
                    cat build_output.log
                    echo "\n--- 로그 끝 ---"
                else
                    echo "build_output.log 파일이 비어있습니다."
                fi
            else
                echo "build_output.log 파일이 생성되지 않았습니다."
            fi

            # 라이센스 관련 오류인지 확인하고 재시도
            if [ -f build_output.log ] && grep -q "license.*not accepted\|Accept.*y/N" build_output.log; then
                echo "\n=== 라이센스 오류 감지 - 재시도 ==="
                if [ -d "$ANDROID_HOME/cmdline-tools/latest/bin" ]; then
                    echo "Android SDK Manager로 라이센스 수락 재시도..."
                    (yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses) 2>/dev/null || echo "라이센스 수락 재시도 완료"

                    echo "라이센스 수락 후 buildozer 재실행..."
                    buildozer android $BUILD_TYPE > build_output_retry.log 2>&1 && echo "✅ 재시도 성공!" || echo "❌ 재시도도 실패"
                fi
            fi

            echo "\n=== 다른 로그 파일 검색 ==="
            find . -name "*.log" -type f 2>/dev/null | head -10 || echo "로그 파일 없음"
            
            echo "\n=== .buildozer 디렉토리 확인 ==="
            if [ -d .buildozer ]; then
                find .buildozer -type f -name "*.log" 2>/dev/null | head -5 || echo ".buildozer 내 로그 파일 없음"
            else
                echo ".buildozer 디렉토리가 생성되지 않았습니다."
            fi
            
            exit $BUILD_EXIT_CODE
        fi

    - name: 📂 빌드 결과 확인
      run: |
        echo "=== 빌드 결과 확인 ==="
        ls -la bin/ || echo "bin 폴더가 없습니다."
        find . -name "*.apk" -type f || echo "APK 파일을 찾을 수 없습니다."

    - name: 🚀 APK 파일 업로드
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: bible-mp3-player-${{ github.event.inputs.build_type || 'debug' }}-apk-simple
        path: bin/*.apk

    - name: ✅ 빌드 완료 알림
      if: success()
      run: |
        echo "🎉 APK 빌드가 성공적으로 완료되었습니다!"
        echo "📱 APK 파일을 Artifacts에서 다운로드할 수 있습니다."
        
    - name: ❌ 빌드 실패 시 디버깅 정보
      if: failure()
      run: |
        echo "❌ 빌드가 실패했습니다. 디버깅 정보:"
        echo "=== buildozer.spec 내용 ==="
        cat buildozer.spec || echo "buildozer.spec 파일 없음"
        echo "=== .buildozer 로그 ==="
        find .buildozer -name "*.log" -exec cat {} \; 2>/dev/null || echo "buildozer 로그 없음"